name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build and release"
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: arm64
            target: aarch64-apple-darwin
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y gcc-multilib g++-aarch64-linux-gnu gcc-aarch64-linux-gnu

      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: brew install cbindgen

      - name: Set up cross-compilation (Linux ARM)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get install -y gcc-aarch64-linux-gnu
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc

      - name: Set up cross-compilation (macOS ARM)
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: rustup target add aarch64-apple-darwin

      - name: Build release
        run: |
          make clean || true
          make release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-${{ matrix.arch }}
          path: release/

  publish:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-release

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event.inputs.tag || github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for dir in all-release/*; do
            zip -r "$dir.zip" "$dir"
            gh release upload "${{ github.event.inputs.tag || github.ref_name }}" "$dir.zip"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
